name: Build, Test, Deploy with Docker Hub + Slack

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: playwright-docker-e2e-tests

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3

    - name: üîê Docker Hub Login
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: üèóÔ∏è Build Docker image
      run: docker build -t ${{ env.IMAGE_NAME }} .

    - name: üöÄ Push to Docker Hub
      run: |
        docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3

    - name: üîß Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: üß™ Setup Node for Playwright
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: üì¶ Install Node dependencies
      run: npm ci

    - name: üé≠ Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: üîê Create .env file from GitHub Secrets
      run: |
        echo "BEARER_TOKEN=${{ secrets.BEARER_TOKEN }}" >> .env
        echo "GITHUB_USER=${{ secrets.GITHUB_USER }}" >> .env
        echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> .env
        echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
        echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> .env

    - name: ‚úÖ Run Go + Playwright tests
      run: make test

    - name: üìä Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: |
          report.html
          playwright-report/

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3

    - name: üîê Restore kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > $HOME/.kube/config
        echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

    - name: üöÄ Deploy to Kubernetes
      run: |
        kubectl config use-context minikube
        kubectl apply -f k8s/deployment.yml
        kubectl apply -f k8s/service.yml

  notify:
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    if: always()

    steps:
    - name: üì£ Send Slack Notification
      run: |
        STATUS="${{ needs.test.result }}"
        if [ "$STATUS" = "success" ]; then
          TEXT="‚úÖ *CI/CD Passed* for \`${{ github.repository }}\`"
        else
          TEXT="‚ùå *CI/CD Failed* for \`${{ github.repository }}\`"
        fi
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\": \"$TEXT\"}" \
        "$SLACK_WEBHOOK"
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
