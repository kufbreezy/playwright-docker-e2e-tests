name: Build, Test, Deploy with Docker Hub + Slack

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: playwright-docker-e2e-tests

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üèó Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      - name: üîê Create .env file from GitHub Secrets
        run: |
          echo "BEARER_TOKEN=${{ secrets.BEARER_TOKEN }}" >> .env
          echo "GITHUB_USER=${{ secrets.GITHUB_USER }}" >> .env
          echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> .env
      - name: ‚úÖ Run Playwright tests
        run: |
          docker run --rm \
            -v $(pwd)/playwright-report:/app/playwright-report \
            -v $(pwd)/report.html:/app/report.html \
            --env-file .env \
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: üìä Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: |
            report.html
            playwright-report/
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      - name: üîê Create kubeconfig directory and restore kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > $HOME/.kube/config || {
            echo "Error: Failed to decode KUBECONFIG_B64. Check if the secret is set and valid."
            exit 1
          }
          chmod 600 $HOME/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
      - name: üîç Debug kubeconfig
        run: |
          ls -l $HOME/.kube/
          kubectl config view --minify
        env:
          KUBECONFIG: $HOME/.kube/config
      - name: üîß Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'
      - name: üîê Create Docker image pull secret
        run: |
          kubectl create secret docker-registry regcred \
            --docker-username=${{ secrets.DOCKER_USERNAME }} \
            --docker-password=${{ secrets.DOCKER_PASSWORD }} \
            --namespace=default \
            --dry-run=client -o yaml | kubectl apply -f -
        env:
          KUBECONFIG: $HOME/.kube/config
      - name: üîê Create application secrets
        run: |
          kubectl create secret generic playwright-secrets \
            --from-literal=bearer-token=${{ secrets.BEARER_TOKEN }} \
            --from-literal=github-user=${{ secrets.GITHUB_USER }} \
            --namespace=default \
            --dry-run=client -o yaml | kubectl apply -f -
        env:
          KUBECONFIG: $HOME/.kube/config
      - name: üöÄ Deploy to Kubernetes
        run: |
          sed -i "s|\${{ secrets.DOCKER_USERNAME }}|${{ secrets.DOCKER_USERNAME }}|g" k8s/*.yml
          kubectl apply -f k8s/pvc.yml
          kubectl apply -f k8s/jobs.yml
          kubectl apply -f k8s/cronjob.yml
          kubectl apply -f k8s/deployment.yml
          kubectl wait --for=condition=complete job/playwright-tester-job --timeout=300s
          kubectl rollout status deployment/playwright-tester --timeout=300s
        env:
          KUBECONFIG: $HOME/.kube/config
      - name: üìä Collect test results
        run: |
          POD_NAME=$(kubectl get pod -l app=playwright -o jsonpath="{.items[0].metadata.name}")
          kubectl cp ${POD_NAME}:/app/playwright-report ./playwright-report
          kubectl cp ${POD_NAME}:/app/report.html ./report.html || echo "No report.html found"
        env:
          KUBECONFIG: $HOME/.kube/config
      - name: üìä Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k8s-test-report
          path: |
            report.html
            playwright-report/
          retention-days: 7
      - name: ‚úÖ Verify deployment
        run: |
          kubectl get pods -o wide
          kubectl describe deployment playwright-tester
          kubectl describe job playwright-tester-job
        env:
          KUBECONFIG: $HOME/.kube/config

  notify:
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    if: always()

    steps:
      - name: üì£ Send Slack Notification
        run: |
          STATUS="${{ needs.test.result == 'success' && needs.deploy.result == 'success' }}"
          if [ "$STATUS" = "true" ]; then
            TEXT="‚úÖ *CI/CD Passed* for \`${{ github.repository }}\` (Commit: ${{ github.sha }})"
          else
            TEXT="‚ùå *CI/CD Failed* for \`${{ github.repository }}\` (Commit: ${{ github.sha }})"
          fi
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"$TEXT\"}" \
            "${{ secrets.SLACK_WEBHOOK }}"
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}