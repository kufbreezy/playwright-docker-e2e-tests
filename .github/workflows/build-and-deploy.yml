name: Build and Deploy with Slack Alert

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: playwright-docker-e2e-tests
  GITHUB_USER: kufbreezy

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🔐 Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: 🏗️ Build Docker image
      run: docker build -t ${{ env.IMAGE_NAME }} .

    - name: 🚀 Push to Docker Hub
      run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest &&
           docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: 📦 Push to GitHub Packages
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ env.GITHUB_USER }} --password-stdin
        docker tag ${{ env.IMAGE_NAME }} ghcr.io/${{ env.GITHUB_USER }}/${{ env.IMAGE_NAME }}:latest
        docker push ghcr.io/${{ env.GITHUB_USER }}/${{ env.IMAGE_NAME }}:latest

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🔧 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: ✅ Run Go tests
      run: make test

    - name: 📊 Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: go-test-report
        path: report.html

  notify:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: always()

    steps:
    - name: 📣 Slack alert
      run: |
        STATUS="${{ needs.test.result }}"
        if [ "$STATUS" = "success" ]; then
          TEXT="✅ *CI/CD Pipeline Passed* for repo \`${{ github.repository }}\`"
        else
          TEXT="❌ *CI/CD Pipeline Failed* for repo \`${{ github.repository }}\`"
        fi
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\": \"$TEXT\"}" \
        "$SLACK_WEBHOOK"
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
